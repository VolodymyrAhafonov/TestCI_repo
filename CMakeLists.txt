cmake_minimum_required(VERSION 2.8.9)
project(Test)
set(Caffe_include ${CMAKE_SOURCE_DIR}/caffe/include)
set(Caffe_static_lib ${CMAKE_SOURCE_DIR}/caffe/build/lib/libcaffe.a)

IF (CMAKE_COMPILER_IS_GNUCC)
     message ("GCC")
     SET(CMAKE_C_FLAGS "-g -O0 -Wall -fprofile-arcs -ftest-coverage")
     SET(CMAKE_CXX_FLAGS "-g -O0 -Wall -fprofile-arcs -ftest-coverage")
     SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fprofile-arcs -ftest-coverage -lgcov")
ENDIF()


include_directories(${Caffe_include})
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(/usr/include/openblas)
include_directories(/usr/include/gtest)


add_definitions(-DCPU_ONLY)

add_definitions(-lpthread)

find_library(G_PROTOBUF protobuf)
message("g_proto is at: ${G_PROTOBUF}")
find_library(G_PROTOC protoc)
message("g_protoc is at: ${G_PROTOC}")
find_library(G_GLOG glog)
message ("g_glog is at: ${G_GLOG}")
find_library(BOOST_FS boost_filesystem)
message ("boost fs at: ${BOOST_FS}")
find_library(BOOST_ST boost_system)
message ("boost_st at: ${BOOST_ST}")
find_library(BOOST_THR boost_thread)
message ("boost_thread at: ${BOOST_THR}")
find_library(OP_BLS openblas)
message ("openblas at: ${OP_BLS}")
find_library(HDF5 hdf5)
message("hdf5 is at: ${HDF5}")
find_library(HDF5_HL hdf5_hl)
message("hdf5_hl is at ${HDF5_HL}")
find_library(GFLAGS gflags)
message("gflags is at: ${GFLAGS}")
find_library(LVLDB leveldb)
message("leveldb is at: ${LVLDB}")
find_library(LMDB lmdb)
message("lmdb is at: ${LMDB}")
find_library(LIBZ z)
message("libz is at: ${LIBZ}")
find_library(GTEST gtest)
message("gtest is at: ${GTEST}")
find_package(Threads)
message("threads is at: ${CMAKE_THREAD_LIBS_INIT}")

find_package(OpenCV REQUIRED core imgproc highgui)

set(TestSources  ${CMAKE_SOURCE_DIR}/src/TrimapDetector.cpp ${CMAKE_SOURCE_DIR}/src/test/TrimapDetectorTest.cpp)
add_executable(UnitTest ${TestSources})
	


TARGET_LINK_LIBRARIES(UnitTest -Wl,--whole-archive ${Caffe_static_lib} -Wl,--no-whole-archive)
TARGET_LINK_LIBRARIES(UnitTest ${G_PROTOBUF})
#TARGET_LINK_LIBRARIES(UnitTest ${G_PROTOC})
TARGET_LINK_LIBRARIES(UnitTest ${G_GLOG})
TARGET_LINK_LIBRARIES(UnitTest ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(UnitTest ${BOOST_FS})
TARGET_LINK_LIBRARIES(UnitTest ${BOOST_ST})
TARGET_LINK_LIBRARIES(UnitTest ${CMAKE_THREAD_LIBS_INIT})
TARGET_LINK_LIBRARIES(UnitTest ${BOOST_THR})
TARGET_LINK_LIBRARIES(UnitTest ${OP_BLS})
TARGET_LINK_LIBRARIES(UnitTest ${HDF5})
TARGET_LINK_LIBRARIES(UnitTest ${HDF5_HL})
TARGET_LINK_LIBRARIES(UnitTest ${GFLAGS})
TARGET_LINK_LIBRARIES(UnitTest ${LVLDB})
TARGET_LINK_LIBRARIES(UnitTest ${LMDB})
TARGET_LINK_LIBRARIES(UnitTest ${LIBZ})
TARGET_LINK_LIBRARIES(UnitTest ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(UnitTest ${GTEST})

add_custom_target(runtest COMMAND UnitTest)

set(LibrarySources ${CMAKE_SOURCE_DIR}/src/TrimapDetector.cpp)
add_library(trimap_nn SHARED  ${LibrarySources})

TARGET_LINK_LIBRARIES(trimap_nn -Wl,--whole-archive ${Caffe_static_lib} -Wl,--no-whole-archive)
TARGET_LINK_LIBRARIES(trimap_nn ${G_PROTOBUF})
#TARGET_LINK_LIBRARIES(trimap_nn ${G_PROTOC})
TARGET_LINK_LIBRARIES(trimap_nn ${G_GLOG})
TARGET_LINK_LIBRARIES(trimap_nn ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(trimap_nn ${BOOST_FS})
TARGET_LINK_LIBRARIES(trimap_nn ${BOOST_ST})
TARGET_LINK_LIBRARIES(trimap_nn ${CMAKE_THREAD_LIBS_INIT})
TARGET_LINK_LIBRARIES(trimap_nn ${BOOST_THR})
TARGET_LINK_LIBRARIES(trimap_nn ${OP_BLS})
TARGET_LINK_LIBRARIES(trimap_nn ${HDF5})
TARGET_LINK_LIBRARIES(trimap_nn ${HDF5_HL})
TARGET_LINK_LIBRARIES(trimap_nn ${GFLAGS})
TARGET_LINK_LIBRARIES(trimap_nn ${LVLDB})
TARGET_LINK_LIBRARIES(trimap_nn ${LMDB})
TARGET_LINK_LIBRARIES(trimap_nn ${LIBZ})
TARGET_LINK_LIBRARIES(trimap_nn ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(trimap_nn ${GTEST})




